"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Plus, Search, Trash2, AlertTriangle, Loader2, Info, CheckCircle } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetFooter, SheetDescription } from "@/components/ui/sheet"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { NewSKUSheet } from "./new-sku-sheet"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { logger } from "@/lib/logger"
import { fetchSkus, fetchCustomers } from "@/lib/api-service"
import { ORDER_STATUS } from "@/constants/job-workflow"
import { GOLD_TYPE_CODES } from "@/constants/categories"
import "@/styles/order-form.css"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { getPredictedNextOrderNumber } from "@/app/actions/order-actions"

// Default customer ID for "Exquisite Fine Jewellery" - replace with the actual ID from Phase 1
const DEFAULT_CUSTOMER_ID = "8505d3dc-97c0-4636-a11d-1c8305ed07ac"

// Type definitions for component props
interface NewOrderSheetProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  editOrder?: any | null
  onOrderCreated?: (order: any) => void
  isSubmitting?: boolean
}

// Helper function to calculate default production date (today + 15 days)
function getDefaultProductionDate() {
  const today = new Date()
  const futureDate = new Date(today)
  futureDate.setDate(today.getDate() + 15)
  return futureDate.toISOString().split("T")[0] // Format as YYYY-MM-DD
}

// Helper function to calculate default delivery date (default production date + 15 days)
function getDefaultDeliveryDate() {
  
  const defaultProductionDate = new Date(getDefaultProductionDate()) // Get the default production date
  const deliveryDate = new Date(defaultProductionDate)
  deliveryDate.setDate(defaultProductionDate.getDate() + 15) // Add 15 days to the default production date
  const resultDate = deliveryDate.toISOString().split("T")[0];

  return resultDate
}


export function NewOrderSheet({
  open,
  onOpenChange,
  editOrder = null,
  onOrderCreated = () => {},
  isSubmitting = false,
}: NewOrderSheetProps) {
  // For new orders, don't set an ID - it will be generated by the server
  // For edit orders, keep the existing ID
  const initialFormState = {
    // Don't set an ID for new orders - it will be generated by the server
    id: editOrder?.id || "",
    orderType: editOrder?.orderType || "Regular",
    customerName: editOrder?.customerName || "",
    customerId: editOrder?.customerId || "", // Add customerId to initial form state
    productionDate: editOrder?.productionDate || "",
    dueDate: editOrder?.dueDate || "",
    status: editOrder?.status || ORDER_STATUS.NEW,
    action: editOrder?.action || "View details",
    remarks: editOrder?.remarks || "",
    skus: editOrder?.skus || [],
    createdAt: editOrder?.createdAt || new Date().toISOString(),
  }

  const [orderType, setOrderType] = useState(editOrder?.orderType || "Stock")
  const [customerName, setCustomerName] = useState(editOrder?.customerName || "Exquisite Fine Jewellery")
  const [customerId, setCustomerId] = useState(editOrder?.customerId || DEFAULT_CUSTOMER_ID) // Add customerId state
  const [selectedSKUs, setSelectedSKUs] = useState(editOrder?.skus || [])
  const [productionDueDate, setProductionDueDate] = useState(editOrder?.productionDate || getDefaultProductionDate())
  const [deliveryDate, setDeliveryDate] = useState(editOrder?.deliveryDate || getDefaultDeliveryDate())
  const [searchQuery, setSearchQuery] = useState("")
  const [dateWarning, setDateWarning] = useState(false)
  const [newSKUSheetOpen, setNewSKUSheetOpen] = useState(false)
  const [availableSKUs, setAvailableSKUs] = useState([])
  const [isLoadingSKUs, setIsLoadingSKUs] = useState(true)
  const [skuError, setSkuError] = useState(null)
  const [remarks, setRemarks] = useState(editOrder?.remarks || "")
  const [sameDatesForAll, setSameDatesForAll] = useState({
    production: false, // Changed from true to false
    delivery: false, // Changed from true to false
  })
  const [isDraft, setIsDraft] = useState(false)
  const [categoryFilter, setCategoryFilter] = useState("all")
  const [goldTypeFilter, setGoldTypeFilter] = useState("all")
  const [stoneTypeFilter, setStoneTypeFilter] = useState("all")
  const [imageDialogOpen, setImageDialogOpen] = useState(false)
  const [selectedImage, setSelectedImage] = useState(null)
  const [formError, setFormError] = useState<string | null>(null)
  const [customers, setCustomers] = useState([])
  const [isLoadingCustomers, setIsLoadingCustomers] = useState(true)
  const [activeTab, setActiveTab] = useState("select-sku")

  const [predictedOrderId, setPredictedOrderId] = useState<string>("")
  const [isPredictingOrderId, setIsPredictingOrderId] = useState<boolean>(false)

  // For bulk assign functionality
  const [bulkSkuInput, setBulkSkuInput] = useState("")
  const [bulkAssignError, setBulkAssignError] = useState(null)
  const [bulkAssignSuccess, setBulkAssignSuccess] = useState(null)
  const [isBulkProcessing, setIsBulkProcessing] = useState(false)

  const loadSKUs = async () => {
    try {
      setIsLoadingSKUs(true);
      setSkuError(null);
      logger.info("Fetching SKUs for order form");
      const skus = await fetchSkus();
      if (skus && skus.length > 0) {
        setAvailableSKUs(skus);
        logger.info(`Loaded ${skus.length} SKUs for order form`);
      } else {
        logger.warn("No SKUs found in database for order form");
        setSkuError("No SKUs found. Please create SKUs first.");
      }
    } catch (error) {
      logger.error("Error loading SKUs for order form", { error });
      setSkuError("Failed to load SKUs. Please try again.");
    } finally {
      setIsLoadingSKUs(false);
    }
  };

  // Fetch customers from Supabase when component mounts
  useEffect(() => {
    async function loadCustomers() {
      try {
        setIsLoadingCustomers(true)

        logger.info("Fetching customers for order form")
        const customers = await fetchCustomers()

        logger.debug("Customer data received:", {
          data: {
            count: customers?.length || 0,
            sample: customers?.slice(0, 2) || [],
            isArray: Array.isArray(customers),
            type: typeof customers,
          },
        })

        if (customers && customers.length > 0) {
          setCustomers(customers)
          logger.info(`Loaded ${customers.length} customers for order form`)
        } else {
          logger.warn("No customers found in database for order form")
        }
      } catch (error) {
        logger.error("Error loading customers for order form", { error })
      } finally {
        setIsLoadingCustomers(false)
      }
    }

    if (open) {
      loadCustomers()
    }
  }, [open])

  // Fetch SKUs from Supabase when component mounts
  useEffect(() => {
    async function loadSKUs() {
      try {
        setIsLoadingSKUs(true)
        setSkuError(null)

        logger.info("Fetching SKUs for order form")
        const skus = await fetchSkus()

        if (skus && skus.length > 0) {
          setAvailableSKUs(skus)
          logger.info(`Loaded ${skus.length} SKUs for order form`)
        } else {
          logger.warn("No SKUs found in database for order form")
          setSkuError("No SKUs found. Please create SKUs first.")
        }
      } catch (error) {
        logger.error("Error loading SKUs for order form", { error })
        setSkuError("Failed to load SKUs. Please try again.")
      } finally {
        setIsLoadingSKUs(false)
      }
    }

    if (open) {
      loadSKUs()
    }
  }, [open])

  // Filter SKUs based on search query and filters
  const filteredSKUs = availableSKUs.filter((sku) => {
    // Search query filter
    if (searchQuery) {
      const skuId = sku.id ? sku.id.toLowerCase() : ""
      const skuName = sku.name ? sku.name.toLowerCase() : ""
      const query = searchQuery.toLowerCase()

      if (!skuId.includes(query) && !skuName.includes(query)) {
        return false
      }
    }

    // Category filter
    if (categoryFilter !== "all" && sku.category !== categoryFilter) {
      return false
    }

    // Gold type filter
    if (goldTypeFilter !== "all" && sku.goldType !== goldTypeFilter) {
      return false
    }

    // Stone type filter
    if (stoneTypeFilter !== "all" && sku.stoneType !== stoneTypeFilter) {
      return false
    }

    return true
  })

  // Check if delivery date is before production date
  useEffect(() => {
    if (productionDueDate && deliveryDate) {
      const prodDate = new Date(productionDueDate)
      const delDate = new Date(deliveryDate)

      // Set warning if delivery date is before production date
      setDateWarning(delDate < prodDate)
    }
  }, [productionDueDate, deliveryDate])

  // Handle order type change
  useEffect(() => {
    if (orderType === "Stock") {
      setCustomerId(DEFAULT_CUSTOMER_ID)
      setCustomerName("Exquisite Fine Jewellery")
    } else if (!editOrder) {
      setCustomerId("")
      setCustomerName("")
    }
  }, [orderType, editOrder])

// Add this new useEffect for tab change handling



  // Load edit order data
  useEffect(() => {
    if (editOrder) {
      setOrderType(editOrder.orderType || "Stock")

      // Handle existing orders that might not have customerId
      if (editOrder.customerId) {
        // If customerId exists, use it directly
        setCustomerId(editOrder.customerId)
        setCustomerName(editOrder.customerName || "")
      } else if (editOrder.customerName) {
        // For orders without customerId but with customerName, try to find matching customer
        if (editOrder.orderType === "Stock") {
          // For stock orders, use the default customer
          setCustomerId(DEFAULT_CUSTOMER_ID)
          setCustomerName("Exquisite Fine Jewellery")
        } else if (customers.length > 0) {
          // For customer orders, try to find the customer by name
          const matchingCustomer = customers.find((c) => c.name === editOrder.customerName)
          if (matchingCustomer) {
            logger.info(`Found matching customer ID for "${editOrder.customerName}": ${matchingCustomer.id}`)
            setCustomerId(matchingCustomer.id)
          } else {
            logger.warn(`No matching customer found for name: "${editOrder.customerName}"`)
            // Set empty ID to force user to select a customer
            setCustomerId("")
          }
          setCustomerName(editOrder.customerName)
        }
      } else {
        // Fallback for orders with no customer info
        if (editOrder.orderType === "Stock") {
          setCustomerId(DEFAULT_CUSTOMER_ID)
          setCustomerName("Exquisite Fine Jewellery")
        } else {
          setCustomerId("")
          setCustomerName("")
        }
      }

      setSelectedSKUs(editOrder.skus || [])
      setProductionDueDate(editOrder.productionDate || editOrder.productionDueDate || "")
      setDeliveryDate(editOrder.deliveryDate || "")
      setRemarks(editOrder.remarks || "")
      setIsDraft(editOrder.status === "Draft")
    }
  }, [editOrder, customers])

  // Handle customer lookup for edit orders when customers are loaded
  useEffect(() => {
    if (
      editOrder &&
      !editOrder.customerId &&
      editOrder.customerName &&
      editOrder.orderType === "Customer" &&
      customers.length > 0
    ) {
      const matchingCustomer = customers.find((c) => c.name === editOrder.customerName)
      if (matchingCustomer) {
        logger.info(`Found matching customer ID for "${editOrder.customerName}": ${matchingCustomer.id}`)
        setCustomerId(matchingCustomer.id)
      } else {
        logger.warn(`No matching customer found for name: "${editOrder.customerName}"`)
      }
    }
  }, [customers, editOrder])

  // Check delivery date when it changes
  const handleDeliveryDateChange = (date) => {
    setDeliveryDate(date)

    if (productionDueDate) {
      const prodDate = new Date(productionDueDate)
      const newDeliveryDate = new Date(date)

      // Set warning if delivery date is before production date
      setDateWarning(newDeliveryDate < prodDate)
    }
  }

  // Handle customer selection
  const handleCustomerChange = (value) => {
    const [id, name] = value.split("|")
    setCustomerId(id)
    setCustomerName(name)
    logger.debug("Customer selected:", { id, name })
  }

  // Check if a SKU is already selected
  const isSkuSelected = (skuId) => {
    return selectedSKUs.some((sku) => sku.id === skuId)
  }

  const addSKU = (sku) => {
    // Check if SKU already exists in the selected list
    const existingIndex = selectedSKUs.findIndex((item) => item.id === sku.id)

    if (existingIndex >= 0) {
      // If exists, update quantity
      const updatedSKUs = [...selectedSKUs]
      updatedSKUs[existingIndex].quantity += 1
      setSelectedSKUs(updatedSKUs)
    } else {
      // If new, add with quantity 1 and individual dates if needed
      const newSku = {
        ...sku,
        quantity: 1,
        size: sku.size || "",
        remarks: "",
        individualProductionDate: productionDueDate || "",
        individualDeliveryDate: deliveryDate || "",
      }
      setSelectedSKUs([...selectedSKUs, newSku])
    }
  }

  const removeSKU = (skuId) => {
    setSelectedSKUs(selectedSKUs.filter((sku) => sku.id !== skuId))
  }

  const updateQuantity = (skuId, quantity) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, quantity: Number.parseInt(quantity) || 1 }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateSize = (skuId, size) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, size: size }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateRemarks = (skuId, value) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, remarks: value.slice(0, 100) }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateIndividualDate = (skuId, field, value) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, [field]: value }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)

    // Check for date warnings after updating
    checkForDateWarnings(updatedSKUs)
  }

  // Helper function to check for date warnings across all SKUs
  const checkForDateWarnings = (skus = selectedSKUs) => {
    // Check global dates
    if (productionDueDate && deliveryDate) {
      const prodDate = new Date(productionDueDate)
      const delDate = new Date(deliveryDate)

      if (delDate < prodDate) {
        setDateWarning(true)
        return
      }
    }

    // Check individual SKU dates
    const hasDateWarning = skus.some((sku) => {
      if (sku.individualProductionDate && sku.individualDeliveryDate) {
        const prodDate = new Date(sku.individualProductionDate)
        const delDate = new Date(sku.individualDeliveryDate)
        return delDate < prodDate
      }
      return false
    })

    setDateWarning(hasDateWarning)
  }

  // Get gold type acronym from full name
  const getGoldTypeAcronym = (goldType) => {
    return GOLD_TYPE_CODES[goldType] || goldType || "-"
  }

  /**
   * Parses the bulk SKU input string into an array of SKU IDs and quantities
   * Format expected: "SKU-001:2, SKU-002:1, SKU-003:3"
   */
  const parseBulkSkuInput = (input) => {
    if (!input.trim()) return []

    try {
      return input
        .split(",")
        .map((item) => item.trim())
        .filter((item) => item)
        .map((item) => {
          const [skuId, quantityStr] = item.split(":").map((part) => part.trim())
          const quantity = Number.parseInt(quantityStr, 10)

          if (!skuId) throw new Error(`Invalid SKU ID format in "${item}"`)
          if (isNaN(quantity) || quantity <= 0) throw new Error(`Invalid quantity for SKU ${skuId}`)

          return { skuId, quantity }
        })
    } catch (error) {
      throw new Error(`Failed to parse input: ${error.message}`)
    }
  }

  /**
   * Processes the parsed bulk SKU data and adds the SKUs to the selected list
   */
  const processBulkSkus = async () => {
    setBulkAssignError(null)
    setBulkAssignSuccess(null)
    setIsBulkProcessing(true)

    try {
      const parsedItems = parseBulkSkuInput(bulkSkuInput)
      if (parsedItems.length === 0) {
        setBulkAssignError("Please enter at least one SKU in the correct format")
        setIsBulkProcessing(false)
        return
      }

      // Find matching SKUs in the available SKUs list
      const skusToAdd = []
      const notFoundSkus = []

      for (const item of parsedItems) {
        const sku = availableSKUs.find((s) => s.id === item.skuId)
        if (sku) {
          // Check if SKU is already selected
          const existingIndex = selectedSKUs.findIndex((s) => s.id === item.skuId)

          if (existingIndex >= 0) {
            // Update quantity if already selected
            const updatedSKUs = [...selectedSKUs]
            updatedSKUs[existingIndex].quantity += item.quantity
            setSelectedSKUs(updatedSKUs)
          } else {
            // Add new SKU with specified quantity
            skusToAdd.push({
              ...sku,
              quantity: item.quantity,
              size: sku.size || "",
              remarks: "",
              individualProductionDate: productionDueDate || "",
              individualDeliveryDate: deliveryDate || "",
            })
          }
        } else {
          notFoundSkus.push(item.skuId)
        }
      }

      if (skusToAdd.length > 0) {
        setSelectedSKUs((prev) => [...prev, ...skusToAdd])
      }

      // Generate success/error message
      if (notFoundSkus.length > 0) {
        setBulkAssignError(`The following SKUs were not found: ${notFoundSkus.join(", ")}`)
        if (skusToAdd.length > 0) {
          setBulkAssignSuccess(`Successfully added ${skusToAdd.length} SKU(s) to your order`)
        }
      } else {
        setBulkAssignSuccess(`Successfully added ${skusToAdd.length} SKU(s) to your order`)
        // Clear the input on success if all SKUs were found
        setBulkSkuInput("")
      }

      // Switch to the first tab to show the selected SKUs
      setActiveTab("select-sku")
    } catch (error) {
      setBulkAssignError(error.message)
    } finally {
      setIsBulkProcessing(false)
    }
  }

  // Fetch the predicted next order number
  const fetchPredictedOrderNumber = async () => {
    setIsPredictingOrderId(true)
    try {
      logger.info("Fetching predicted order number for new order form")
      const result = await getPredictedNextOrderNumber()
      if (result.success && result.predictedOrderId) {
        setPredictedOrderId(result.predictedOrderId)
        logger.info(`Predicted order ID received: ${result.predictedOrderId}`)
      }
    } catch (err) {
      logger.error("Error predicting next order number:", { error: err })
    } finally {
      setIsPredictingOrderId(false)
    }
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    setFormError(null)

    // Validate form
    if (selectedSKUs.length === 0) {
      setFormError("Please select at least one SKU")
      return
    }

    if (!isDraft && (!productionDueDate || !deliveryDate)) {
      setFormError("Production and delivery dates are required")
      return
    }

    // Check for date warnings in individual SKUs
    const hasDateWarning = selectedSKUs.some((sku) => {
      const prodDate = sameDatesForAll.production ? new Date(productionDueDate) : new Date(sku.individualProductionDate)

      const delDate = sameDatesForAll.delivery ? new Date(deliveryDate) : new Date(sku.individualDeliveryDate)

      return delDate < prodDate
    })

    if (hasDateWarning) {
      setFormError("Delivery Date cannot be set before the production date for one or more SKUs")
      return
    }

    // Validate customer selection for Customer orders
    if (orderType === "Customer" && !customerId) {
      setFormError("Please select a customer")
      return
    }

    // Add additional validation for edited orders
    if (editOrder && editOrder.orderType === "Customer" && !customerId) {
      setFormError("This order needs a customer. Please select one.")
      return
    }

    // Log order creation/update
    logger.info(`${editOrder ? "Updating" : "Creating"} order`, {
      data: {
        skuCount: selectedSKUs.length,
        isDraft,
        customerId, // Log the customer ID
      },
    })

    // Create order object with customer ID
    const order = {
      ...(editOrder ? { id: editOrder.id } : {}), // Only include ID if editing
      orderType,
      customerId, // Include customer ID
      customerName,
      skus: selectedSKUs,
      productionDate: productionDueDate,
      dueDate: deliveryDate,
      status: isDraft ? ORDER_STATUS.DRAFT : ORDER_STATUS.NEW,
      action: isDraft ? "Complete order" : "Stone selection",
      remarks,
      createdAt: new Date().toISOString(),
    }

    // Call the onOrderCreated callback
    console.log("🔍 About to call onOrderCreated with:", order)
    console.log("🔍 onOrderCreated function:", onOrderCreated.toString())
    onOrderCreated(order)
    console.log("🔍 onOrderCreated called successfully")

    // Reset form and close sheet only if not submitting
    // The parent component will handle closing the sheet after successful submission
    if (!isSubmitting) {
      if (!isDraft) {
        setSelectedSKUs([])
        setProductionDueDate(getDefaultProductionDate())
        setDeliveryDate(getDefaultDeliveryDate())
        setOrderType("Stock")
        setCustomerId(DEFAULT_CUSTOMER_ID)
        setCustomerName("Exquisite Fine Jewellery")
        setRemarks("")
        setSameDatesForAll({ production: false, delivery: false })
      }

      onOpenChange(false)
    }
  }

  const handleNewSKUCreated = (newSKU) => {
    // Console logging for debugging multiple SKU creation
    console.log("🔍 handleNewSKUCreated called with SKU:", newSKU.sku_id || newSKU.id)

    // Map image_url to image for consistency
    const normalizedSKU = {
      ...newSKU,
      id: newSKU.sku_id || newSKU.id,
      image: newSKU.image_url || newSKU.image, // Add this mapping
    }

    // Debug logging to verify image URL mapping
    console.log("🔍 Normalized SKU data:", {
      originalImage: newSKU.image,
      originalImageUrl: newSKU.image_url,
      finalImage: normalizedSKU.image,
      skuId: normalizedSKU.id
    })

    // Additional verification logging
    console.log("🔍 SKU being added to selectedSKUs with image:", normalizedSKU.image)

    // Add the new SKU to available SKUs using functional update
    setAvailableSKUs((prevAvailableSKUs) => [...prevAvailableSKUs, normalizedSKU])

    // Add the new SKU to selected SKUs using functional update
    setSelectedSKUs((prevSelectedSKUs) => [
      ...prevSelectedSKUs,
      {
        ...normalizedSKU,
        quantity: 1,
        size: normalizedSKU.size || "",
        remarks: "",
        individualProductionDate: productionDueDate || "",
        individualDeliveryDate: deliveryDate || "",
      },
    ])

    // DISABLE this -> Switch to the Select SKU tab after creating a new SKU
    //setActiveTab("select-sku")
  }

  const openImageDialog = (image) => {
    setSelectedImage(image)
    setImageDialogOpen(true)
  }

  // Extract unique categories, gold types, and stone types for filters
  const categories = ["all", ...new Set(availableSKUs.map((sku) => sku.category).filter(Boolean))]
  const goldTypes = ["all", ...new Set(availableSKUs.map((sku) => sku.goldType).filter(Boolean))]
  const stoneTypes = ["all", ...new Set(availableSKUs.map((sku) => sku.stoneType).filter(Boolean))]

  // Check for date warnings when relevant state changes
  useEffect(() => {
    checkForDateWarnings()
  }, [productionDueDate, deliveryDate, selectedSKUs, sameDatesForAll])

  // Fetch the predicted order number when the form opens
  useEffect(() => {
    if (open && !editOrder) {
      logger.info("New order sheet opened, fetching predicted order ID")
      fetchPredictedOrderNumber()
    }
  }, [open, editOrder])

  // Log when the form is closed without submitting
  useEffect(() => {
    if (!open && predictedOrderId && !isSubmitting) {
      logger.info(`New order sheet closed without submitting. Predicted order ID ${predictedOrderId} was not used.`)
    }
  }, [open, predictedOrderId, isSubmitting])


  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
  
    if (activeTab === "select-sku" && open) {
      // Set a timeout to delay the refresh
      timeoutId = setTimeout(() => {
        loadSKUs();
      }, 500); // 500ms delay
    }
  
    // Cleanup function to clear the timeout
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [activeTab, open]);


  return (
    <>
      <Sheet open={open} onOpenChange={onOpenChange}>
        {/* Width of new order form - matches sidebar layout */}
        <SheetContent className="w-full sm:max-w-xl md:w-[calc(100vw-240px)] md:max-w-none lg:w-[calc(100vw-240px)] xl:w-[calc(100vw-240px)] overflow-y-auto">
          <SheetHeader>
            <SheetTitle>{editOrder ? "Edit Order" : "Create New Order"}</SheetTitle>
            <SheetDescription>{editOrder ? "Update order details" : "Add a new order to the system"}</SheetDescription>
          </SheetHeader>

          {formError && (
            <Alert variant="destructive" className="mt-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{formError}</AlertDescription>
            </Alert>
          )}

          {!editOrder && (
            <>
              <Alert variant="info" className="mt-4">
                <Info className="h-4 w-4" />
                <AlertDescription>
                  {isPredictingOrderId ? (
                    "Predicting next order ID..."
                  ) : predictedOrderId ? (
                    <div className="text-lg font-semibold">Order ID: {predictedOrderId}</div>
                  ) : (
                    "Order ID will be automatically generated by the system."
                  )}
                </AlertDescription>
              </Alert>

              {predictedOrderId && !isPredictingOrderId && (
                <p className="text-xs italic text-muted-foreground mt-1 ml-1">ID confirmed only on order creation</p>
              )}
            </>
          )}

          {editOrder && editOrder.orderType === "Customer" && editOrder.customerName && !customerId && (
            <Alert variant="warning" className="mt-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                No matching customer found for "{editOrder.customerName}". Please select a customer.
              </AlertDescription>
            </Alert>
          )}

          <form onSubmit={handleSubmit} className="space-y-6 py-6">
            <div className="space-y-4">
              {/* Remove Order Number field for new orders */}
              {editOrder && (
                <div className="space-y-2">
                  <Label htmlFor="orderNumber">Order Number</Label>
                  <Input id="orderNumber" value={editOrder.id} disabled />
                  <p className="text-xs text-muted-foreground">Auto-generated</p>
                </div>
              )}

              <div className="flex flex-wrap gap-4 items-start">
                <div className="space-y-2 w-[150px]">
                  <Label htmlFor="orderType">Order Type</Label>
                  <Select value={orderType} onValueChange={setOrderType} required disabled={isSubmitting}>
                    <SelectTrigger id="orderType">
                      <SelectValue placeholder="Select order type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Stock">Stock</SelectItem>
                      <SelectItem value="Customer">Customer</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2 w-[200px]">
                  <Label htmlFor="customerName">Customer Name</Label>
                  {orderType === "Stock" ? (
                    <Input id="customerName" value={customerName} disabled />
                  ) : (
                    <Select
                      value={customerId && customerName ? `${customerId}|${customerName}` : ""}
                      onValueChange={handleCustomerChange}
                      required
                      disabled={isSubmitting || isLoadingCustomers}
                    >
                      <SelectTrigger id="customerName">
                        <SelectValue placeholder={isLoadingCustomers ? "Loading customers..." : "Select customer"} />
                      </SelectTrigger>
                      <SelectContent>
                        {isLoadingCustomers ? (
                          <SelectItem value="loading|Loading" disabled>
                            Loading customers...
                          </SelectItem>
                        ) : customers.length > 0 ? (
                          customers.map((customer) => (
                            <SelectItem key={customer.id} value={`${customer.id}|${customer.name}`}>
                              {customer.name}
                            </SelectItem>
                          ))
                        ) : (
                          <SelectItem value="nodata|No Data" disabled>
                            No customers found
                          </SelectItem>
                        )}
                      </SelectContent>
                    </Select>
                  )}
                </div>

                <div className="space-y-2 w-[200px]">
                  <Label htmlFor="remarks">Reference Notes</Label>
                  <Input
                    id="remarks"
                    placeholder="Enter any reference notes..."
                    value={remarks}
                    onChange={(e) => setRemarks(e.target.value.slice(0, 500))}
                    disabled={isSubmitting}
                  />
                </div>

                <div className="space-y-2 w-[150px]">
                  <Label htmlFor="productionDate">Production Date</Label>
                  <Input
                    id="productionDate"
                    type="date"
                    value={productionDueDate}
                    onChange={(e) => setProductionDueDate(e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="flex items-center space-x-2 mt-1">
                    <Checkbox
                      id="same-production-date"
                      checked={sameDatesForAll.production}
                      onCheckedChange={(checked) => setSameDatesForAll((prev) => ({ ...prev, production: !!checked }))}
                    />
                    <Label htmlFor="same-production-date" className="text-sm">
                      Same for all SKUs
                    </Label>
                  </div>
                </div>

                <div className="space-y-2 w-[150px]">
                  <Label htmlFor="deliveryDate">Delivery Date</Label>
                  <Input
                    id="deliveryDate"
                    type="date"
                    value={deliveryDate}
                    onChange={(e) => handleDeliveryDateChange(e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="flex items-center space-x-2 mt-1">
                    <Checkbox
                      id="same-delivery-date"
                      checked={sameDatesForAll.delivery}
                      onCheckedChange={(checked) => setSameDatesForAll((prev) => ({ ...prev, delivery: !!checked }))}
                    />
                    <Label htmlFor="same-delivery-date" className="text-sm">
                      Same for all SKUs
                    </Label>
                  </div>
                </div>
              </div>

              {dateWarning && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>Delivery Date cannot be set before the production date</AlertDescription>
                </Alert>
              )}

              {/* Separator above Selected SKUs */}
              <div className="my-6 flex items-center">
                <div className="flex-grow h-px bg-border"></div>
              </div>

              {/* Selected SKUs Table - Now above the SKUs Database List */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Selected SKUs</Label>
                </div>

                {selectedSKUs.length === 0 ? (
                  <div className="text-center py-4 text-muted-foreground border rounded-lg">No SKUs selected yet</div>
                ) : (
                  <div className="border rounded-lg">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-[50px]">Image</TableHead>
                          <TableHead className="w-[90px]">SKU ID</TableHead>
                          <TableHead className="w-[100px]">Category</TableHead>
                          <TableHead className="w-[80px]">Size</TableHead>
                          <TableHead className="w-[80px]">Quantity</TableHead>
                          <TableHead className="w-[140px]">Production Date</TableHead>
                          <TableHead className="w-[140px]">Delivery Date</TableHead>
                          <TableHead className="min-w-[120px]">Remarks</TableHead>
                          <TableHead className="w-[80px] text-center">Remove</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedSKUs.map((sku) => (
                          <TableRow key={sku.id}>
                            <TableCell className="w-[50px]">
                              <div
                                className="w-10 h-10 rounded-md overflow-hidden cursor-pointer"
                                onClick={() => openImageDialog(sku.image)}
                              >
                                <img
                                  src={sku.image || "/placeholder.svg"}
                                  alt={sku.name}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                            </TableCell>
                            <TableCell className="w-[90px] font-semibold">{sku.id}</TableCell>
                            <TableCell className="w-[100px]">{sku.category}</TableCell>
                            <TableCell className="w-[80px]">
                              <Input
                                type="text"
                                className="w-full"
                                value={sku.size || ""}
                                onChange={(e) => updateSize(sku.id, e.target.value)}
                                disabled={sku.category === "Earring" || isSubmitting}
                              />
                            </TableCell>
                            <TableCell className="w-[80px]">
                              <Input
                                type="number"
                                min="1"
                                className="w-full"
                                value={sku.quantity}
                                onChange={(e) => updateQuantity(sku.id, e.target.value)}
                                disabled={isSubmitting}
                              />
                            </TableCell>
                            <TableCell className="w-[140px]">
                              <Input
                                type="date"
                                className="w-full"
                                value={sameDatesForAll.production ? productionDueDate : sku.individualProductionDate}
                                onChange={(e) =>
                                  sameDatesForAll.production
                                    ? setProductionDueDate(e.target.value)
                                    : updateIndividualDate(sku.id, "individualProductionDate", e.target.value)
                                }
                                onPaste={(e) => {
                                  if (sameDatesForAll.production) return
                                  e.preventDefault()
                                  const pastedText = e.clipboardData.getData("text")
                                  // Try to parse the pasted text as a date
                                  if (pastedText && /^\d{4}-\d{2}-\d{2}$/.test(pastedText)) {
                                    updateIndividualDate(sku.id, "individualProductionDate", pastedText)
                                  }
                                }}
                                disabled={isSubmitting || sameDatesForAll.production}
                              />
                            </TableCell>
                            <TableCell className="w-[140px]">
                              <Input
                                type="date"
                                className="w-full"
                                value={sameDatesForAll.delivery ? deliveryDate : sku.individualDeliveryDate}
                                onChange={(e) =>
                                  sameDatesForAll.delivery
                                    ? handleDeliveryDateChange(e.target.value)
                                    : updateIndividualDate(sku.id, "individualDeliveryDate", e.target.value)
                                }
                                onPaste={(e) => {
                                  if (sameDatesForAll.delivery) return
                                  e.preventDefault()
                                  const pastedText = e.clipboardData.getData("text")
                                  // Try to parse the pasted text as a date
                                  if (pastedText && /^\d{4}-\d{2}-\d{2}$/.test(pastedText)) {
                                    updateIndividualDate(sku.id, "individualDeliveryDate", pastedText)
                                  }
                                }}
                                disabled={isSubmitting || sameDatesForAll.delivery}
                              />
                            </TableCell>
                            <TableCell className="min-w-[120px]">
                              <Input
                                type="text"
                                className="w-full"
                                value={sku.remarks || ""}
                                onChange={(e) => updateRemarks(sku.id, e.target.value)}
                                placeholder="Add remarks"
                                maxLength={100}
                                disabled={isSubmitting}
                                style={{ "::placeholder": { fontSize: "0.75rem" } }}
                              />
                            </TableCell>
                            <TableCell className="w-[80px] text-center">
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeSKU(sku.id)}
                                disabled={isSubmitting}
                              >
                                <Trash2 className="h-4 w-4" />
                                <span className="sr-only">Remove</span>
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </div>
              <p className="text-xs text-muted-foreground mt-2">Add SKUs to this order using the tabs below</p>

              <div className="mt-6">
                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                  <TabsList className="grid grid-cols-3">
                    <TabsTrigger value="select-sku">Select an SKU</TabsTrigger>
                    <TabsTrigger value="create-sku">Create an SKU</TabsTrigger>
                    <TabsTrigger value="bulk-assign">Bulk Assign</TabsTrigger>
                  </TabsList>

                  <TabsContent value="select-sku">
                    <div className="p-4 space-y-4">
                      <p className="text-sm text-muted-foreground">
                        Search for existing SKUs in the database and add them to your order. Selected SKUs will appear
                        in the table above.
                      </p>

                      <div className="relative mb-4 w-full">
                        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                        <Input
                          type="search"
                          placeholder="Search SKUs..."
                          className="pl-8 w-full"
                          value={searchQuery}
                          onChange={(e) => setSearchQuery(e.target.value)}
                          disabled={isSubmitting}
                        />
                      </div>

                      <div className="w-full">
                        <div className="border rounded-lg max-h-[300px] overflow-y-auto w-full">
                          {isLoadingSKUs ? (
                            <div className="flex items-center justify-center p-4">
                              <Loader2 className="h-6 w-6 animate-spin mr-2" />
                              <span>Loading SKUs...</span>
                            </div>
                          ) : skuError ? (
                            <div className="text-center py-4 text-muted-foreground">
                              <AlertTriangle className="h-6 w-6 mx-auto mb-2" />
                              <p>{skuError}</p>
                            </div>
                          ) : (
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead className="w-[50px]">Image</TableHead>
                                  <TableHead className="w-[90px]">SKU ID</TableHead>
                                  <TableHead className="w-[100px]">Category</TableHead>
                                  <TableHead className="min-w-[120px]">Collection</TableHead>
                                  <TableHead className="w-[100px] text-center">Add SKU to Order</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {filteredSKUs.map((sku) => {
                                  const isSelected = isSkuSelected(sku.id)
                                  return (
                                    <TableRow key={sku.id} className={isSelected ? "sku-row-selected" : ""}>
                                      <TableCell className="w-[50px]">
                                        <div
                                          className="w-8 h-8 rounded-md overflow-hidden cursor-pointer"
                                          onClick={() => openImageDialog(sku.image)}
                                        >
                                          <img
                                            src={sku.image || "/placeholder.svg?height=40&width=40&text=SKU"}
                                            alt={sku.name}
                                            className="w-full h-full object-cover"
                                          />
                                        </div>
                                      </TableCell>
                                      <TableCell className="w-[90px] font-semibold">{sku.id}</TableCell>
                                      <TableCell className="w-[100px]">{sku.category}</TableCell>
                                      <TableCell className="min-w-[120px]">
                                        {sku.collection ? (
                                          <span>{sku.collection}</span>
                                        ) : (
                                          <span className="italic text-muted-foreground">None</span>
                                        )}
                                      </TableCell>
                                      <TableCell className="w-[100px] text-center">
                                        <Button
                                          type="button"
                                          variant="outline"
                                          size="sm"
                                          onClick={() => addSKU(sku)}
                                          disabled={isSubmitting || isSelected}
                                          className="border border-gray-300"
                                        >
                                          <Plus className="h-4 w-4 mr-1" />
                                          Add to Order
                                        </Button>
                                      </TableCell>
                                    </TableRow>
                                  )
                                })}
                                {filteredSKUs.length === 0 && (
                                  <TableRow>
                                    <TableCell colSpan={5} className="text-center py-4 text-muted-foreground">
                                      No SKUs found
                                    </TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                          )}
                        </div>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="create-sku">
                    <div className="p-4 space-y-4">
                      <p className="text-sm text-muted-foreground">
                        Can't find the SKU you need? Create a new SKU and it will be automatically added to your order
                        and the database.
                      </p>

                      <div className="flex justify-center py-4">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => setNewSKUSheetOpen(true)}
                          disabled={isSubmitting}
                          className="w-[200px]"
                        >
                          <Plus className="mr-2 h-4 w-4" />
                          Create a new SKU
                        </Button>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="bulk-assign">
                    <div className="p-4 space-y-4">
                      <p className="text-sm text-muted-foreground">
                        Quickly add multiple SKUs by entering a list of SKU IDs and quantities in the format below.
                      </p>

                      <div className="bg-muted/20 p-3 rounded-md">
                        <p className="text-sm font-medium mb-2">Format Instructions:</p>
                        <code className="text-xs block mb-2">SKU-001:2, SKU-002:1, SKU-003:3</code>
                        <p className="text-xs text-muted-foreground">
                          Enter each SKU ID followed by a colon and the quantity, separated by commas.
                        </p>
                      </div>

                      {bulkAssignError && (
                        <Alert variant="destructive">
                          <AlertTriangle className="h-4 w-4" />
                          <AlertDescription>{bulkAssignError}</AlertDescription>
                        </Alert>
                      )}

                      {bulkAssignSuccess && (
                        <Alert variant="success" className="bg-green-50 text-green-800 border-green-200">
                          <CheckCircle className="h-4 w-4" />
                          <AlertDescription>{bulkAssignSuccess}</AlertDescription>
                        </Alert>
                      )}

                      <div className="space-y-2">
                        <Label htmlFor="bulkSkuInput">Enter SKU IDs and Quantities</Label>
                        <Textarea
                          id="bulkSkuInput"
                          placeholder="SKU-001:2, SKU-002:1, SKU-003:3"
                          value={bulkSkuInput}
                          onChange={(e) => setBulkSkuInput(e.target.value)}
                          className="min-h-[100px]"
                          disabled={isBulkProcessing}
                        />
                      </div>

                      <Button
                        type="button"
                        onClick={processBulkSkus}
                        disabled={isBulkProcessing || !bulkSkuInput.trim()}
                        className="w-full"
                      >
                        {isBulkProcessing ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Processing...
                          </>
                        ) : (
                          "Add SKUs to Order"
                        )}
                      </Button>
                    </div>
                  </TabsContent>
                </Tabs>
              </div>
            </div>

            <SheetFooter className="flex justify-end mt-6">
              <Button
                type="submit"
                disabled={
                  isSubmitting || selectedSKUs.length === 0 || (!isDraft && (!productionDueDate || !deliveryDate))
                }
                className="w-full"
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {editOrder ? "Updating..." : "Creating..."}
                  </>
                ) : (
                  <>{editOrder ? "Update Order" : "Create Order"}</>
                )}
              </Button>
            </SheetFooter>
          </form>
        </SheetContent>
      </Sheet>

      {/* New SKU Sheet */}
      <NewSKUSheet open={newSKUSheetOpen} onOpenChange={setNewSKUSheetOpen} onSKUCreated={handleNewSKUCreated} />

      <Dialog open={imageDialogOpen} onOpenChange={setImageDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>SKU Image</DialogTitle>
          </DialogHeader>
          <div className="flex items-center justify-center p-6">
            {selectedImage && (
              <img
                src={selectedImage || "/placeholder.svg"}
                alt="SKU"
                className="max-w-full max-h-[500px] object-contain"
              />
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}
