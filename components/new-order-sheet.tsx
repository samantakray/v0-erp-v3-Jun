"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Plus, Search, Trash2, AlertTriangle, Loader2, Info } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetFooter, SheetDescription } from "@/components/ui/sheet"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Separator } from "@/components/ui/separator"
import { NewSKUSheet } from "./new-sku-sheet"
import { Checkbox } from "@/components/ui/checkbox"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { logger } from "@/lib/logger"
import { fetchSkus, fetchCustomers } from "@/lib/api-service"
import { ORDER_STATUS } from "@/constants/job-workflow"

// Default customer ID for "Exquisite Fine Jewellery" - replace with the actual ID from Phase 1
const DEFAULT_CUSTOMER_ID = "8505d3dc-97c0-4636-a11d-1c8305ed07ac"

export function NewOrderSheet({
  open,
  onOpenChange,
  editOrder = null,
  onOrderCreated = () => {},
  isSubmitting = false,
}) {
  // For new orders, don't set an ID - it will be generated by the server
  // For edit orders, keep the existing ID
  const initialFormState = {
    // Don't set an ID for new orders - it will be generated by the server
    id: editOrder?.id || "",
    orderType: editOrder?.orderType || "Regular",
    customerName: editOrder?.customerName || "",
    customerId: editOrder?.customerId || "", // Add customerId to initial form state
    productionDate: editOrder?.productionDate || "",
    dueDate: editOrder?.dueDate || "",
    status: editOrder?.status || ORDER_STATUS.NEW,
    action: editOrder?.action || "View details",
    remarks: editOrder?.remarks || "",
    skus: editOrder?.skus || [],
    createdAt: editOrder?.createdAt || new Date().toISOString(),
  }

  const [orderType, setOrderType] = useState(editOrder?.orderType || "Stock")
  const [customerName, setCustomerName] = useState(editOrder?.customerName || "Exquisite Fine Jewellery")
  const [customerId, setCustomerId] = useState(editOrder?.customerId || DEFAULT_CUSTOMER_ID) // Add customerId state
  const [selectedSKUs, setSelectedSKUs] = useState(editOrder?.skus || [])
  const [productionDueDate, setProductionDueDate] = useState(editOrder?.productionDate || "")
  const [deliveryDate, setDeliveryDate] = useState(editOrder?.deliveryDate || "")
  const [searchQuery, setSearchQuery] = useState("")
  const [dateWarning, setDateWarning] = useState(false)
  const [newSKUSheetOpen, setNewSKUSheetOpen] = useState(false)
  const [availableSKUs, setAvailableSKUs] = useState([])
  const [isLoadingSKUs, setIsLoadingSKUs] = useState(true)
  const [skuError, setSkuError] = useState(null)
  const [remarks, setRemarks] = useState(editOrder?.remarks || "")
  const [sameDatesForAll, setSameDatesForAll] = useState({
    production: true,
    delivery: true,
  })
  const [isDraft, setIsDraft] = useState(false)
  const [categoryFilter, setCategoryFilter] = useState("all")
  const [goldTypeFilter, setGoldTypeFilter] = useState("all")
  const [stoneTypeFilter, setStoneTypeFilter] = useState("all")
  const [imageDialogOpen, setImageDialogOpen] = useState(false)
  const [selectedImage, setSelectedImage] = useState(null)
  const [formError, setFormError] = useState<string | null>(null)
  const [customers, setCustomers] = useState([])
  const [isLoadingCustomers, setIsLoadingCustomers] = useState(true)

  // Fetch customers from Supabase when component mounts
  useEffect(() => {
    async function loadCustomers() {
      try {
        setIsLoadingCustomers(true)

        logger.info("Fetching customers for order form")
        const customers = await fetchCustomers()

        logger.debug("Customer data received:", {
          data: {
            count: customers?.length || 0,
            sample: customers?.slice(0, 2) || [],
            isArray: Array.isArray(customers),
            type: typeof customers,
          },
        })

        if (customers && customers.length > 0) {
          setCustomers(customers)
          logger.info(`Loaded ${customers.length} customers for order form`)
        } else {
          logger.warn("No customers found in database for order form")
        }
      } catch (error) {
        logger.error("Error loading customers for order form", { error })
      } finally {
        setIsLoadingCustomers(false)
      }
    }

    if (open) {
      loadCustomers()
    }
  }, [open])

  // Fetch SKUs from Supabase when component mounts
  useEffect(() => {
    async function loadSKUs() {
      try {
        setIsLoadingSKUs(true)
        setSkuError(null)

        logger.info("Fetching SKUs for order form")
        const skus = await fetchSkus()

        if (skus && skus.length > 0) {
          setAvailableSKUs(skus)
          logger.info(`Loaded ${skus.length} SKUs for order form`)
        } else {
          logger.warn("No SKUs found in database for order form")
          setSkuError("No SKUs found. Please create SKUs first.")
        }
      } catch (error) {
        logger.error("Error loading SKUs for order form", { error })
        setSkuError("Failed to load SKUs. Please try again.")
      } finally {
        setIsLoadingSKUs(false)
      }
    }

    if (open) {
      loadSKUs()
    }
  }, [open])

  // Filter SKUs based on search query and filters
  const filteredSKUs = availableSKUs.filter((sku) => {
    // Search query filter
    if (
      searchQuery &&
      !sku.id.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !sku.name.toLowerCase().includes(searchQuery.toLowerCase())
    ) {
      return false
    }

    // Category filter
    if (categoryFilter !== "all" && sku.category !== categoryFilter) {
      return false
    }

    // Gold type filter
    if (goldTypeFilter !== "all" && sku.goldType !== goldTypeFilter) {
      return false
    }

    // Stone type filter
    if (stoneTypeFilter !== "all" && sku.stoneType !== stoneTypeFilter) {
      return false
    }

    return true
  })

  // Calculate minimum delivery date (7 days after production due date)
  useEffect(() => {
    if (productionDueDate) {
      const prodDate = new Date(productionDueDate)
      const minDeliveryDate = new Date(prodDate)
      minDeliveryDate.setDate(prodDate.getDate() + 7)

      // Format as YYYY-MM-DD for the input
      const formattedDate = minDeliveryDate.toISOString().split("T")[0]

      // Only set delivery date automatically if it hasn't been set yet
      if (!deliveryDate) {
        setDeliveryDate(formattedDate)
      } else {
        // Check if current delivery date is before minimum
        const currentDeliveryDate = new Date(deliveryDate)
        setDateWarning(currentDeliveryDate < minDeliveryDate)
      }
    }
  }, [productionDueDate, deliveryDate])

  // Handle order type change
  useEffect(() => {
    if (orderType === "Stock") {
      setCustomerId(DEFAULT_CUSTOMER_ID)
      setCustomerName("Exquisite Fine Jewellery")
    } else if (!editOrder) {
      setCustomerId("")
      setCustomerName("")
    }
  }, [orderType, editOrder])

  // Load edit order data
  useEffect(() => {
    if (editOrder) {
      setOrderType(editOrder.orderType || "Stock")

      // Handle existing orders that might not have customerId
      if (editOrder.customerId) {
        // If customerId exists, use it directly
        setCustomerId(editOrder.customerId)
        setCustomerName(editOrder.customerName || "")
      } else if (editOrder.customerName) {
        // For orders without customerId but with customerName, try to find matching customer
        if (editOrder.orderType === "Stock") {
          // For stock orders, use the default customer
          setCustomerId(DEFAULT_CUSTOMER_ID)
          setCustomerName("Exquisite Fine Jewellery")
        } else if (customers.length > 0) {
          // For customer orders, try to find the customer by name
          const matchingCustomer = customers.find((c) => c.name === editOrder.customerName)
          if (matchingCustomer) {
            logger.info(`Found matching customer ID for "${editOrder.customerName}": ${matchingCustomer.id}`)
            setCustomerId(matchingCustomer.id)
          } else {
            logger.warn(`No matching customer found for name: "${editOrder.customerName}"`)
            // Set empty ID to force user to select a customer
            setCustomerId("")
          }
          setCustomerName(editOrder.customerName)
        }
      } else {
        // Fallback for orders with no customer info
        if (editOrder.orderType === "Stock") {
          setCustomerId(DEFAULT_CUSTOMER_ID)
          setCustomerName("Exquisite Fine Jewellery")
        } else {
          setCustomerId("")
          setCustomerName("")
        }
      }

      setSelectedSKUs(editOrder.skus || [])
      setProductionDueDate(editOrder.productionDate || editOrder.productionDueDate || "")
      setDeliveryDate(editOrder.deliveryDate || "")
      setRemarks(editOrder.remarks || "")
      setIsDraft(editOrder.status === "Draft")
    }
  }, [editOrder, customers])

  // Handle customer lookup for edit orders when customers are loaded
  useEffect(() => {
    if (
      editOrder &&
      !editOrder.customerId &&
      editOrder.customerName &&
      editOrder.orderType === "Customer" &&
      customers.length > 0
    ) {
      const matchingCustomer = customers.find((c) => c.name === editOrder.customerName)
      if (matchingCustomer) {
        logger.info(`Found matching customer ID for "${editOrder.customerName}": ${matchingCustomer.id}`)
        setCustomerId(matchingCustomer.id)
      } else {
        logger.warn(`No matching customer found for name: "${editOrder.customerName}"`)
      }
    }
  }, [customers, editOrder])

  // Check delivery date when it changes
  const handleDeliveryDateChange = (date) => {
    setDeliveryDate(date)

    if (productionDueDate) {
      const prodDate = new Date(productionDueDate)
      const minDeliveryDate = new Date(prodDate)
      minDeliveryDate.setDate(prodDate.getDate() + 7)

      const newDeliveryDate = new Date(date)
      setDateWarning(newDeliveryDate < minDeliveryDate)
    }
  }

  // Handle customer selection
  const handleCustomerChange = (value) => {
    const [id, name] = value.split("|")
    setCustomerId(id)
    setCustomerName(name)
    logger.debug("Customer selected:", { id, name })
  }

  const addSKU = (sku) => {
    // Check if SKU already exists in the selected list
    const existingIndex = selectedSKUs.findIndex((item) => item.id === sku.id)

    if (existingIndex >= 0) {
      // If exists, update quantity
      const updatedSKUs = [...selectedSKUs]
      updatedSKUs[existingIndex].quantity += 1
      setSelectedSKUs(updatedSKUs)
    } else {
      // If new, add with quantity 1 and individual dates if needed
      const newSku = {
        ...sku,
        quantity: 1,
        size: sku.size || "",
        remarks: "",
        individualProductionDate: productionDueDate,
        individualDeliveryDate: deliveryDate,
      }
      setSelectedSKUs([...selectedSKUs, newSku])
    }
  }

  const removeSKU = (skuId) => {
    setSelectedSKUs(selectedSKUs.filter((sku) => sku.id !== skuId))
  }

  const updateQuantity = (skuId, quantity) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, quantity: Number.parseInt(quantity) || 1 }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateSize = (skuId, size) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, size: size }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateRemarks = (skuId, value) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, remarks: value.slice(0, 100) }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const updateIndividualDate = (skuId, field, value) => {
    const updatedSKUs = selectedSKUs.map((sku) => {
      if (sku.id === skuId) {
        return { ...sku, [field]: value }
      }
      return sku
    })
    setSelectedSKUs(updatedSKUs)
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    setFormError(null)

    // Validate form
    if (selectedSKUs.length === 0) {
      setFormError("Please select at least one SKU")
      return
    }

    if (!isDraft && (!productionDueDate || !deliveryDate)) {
      setFormError("Production and delivery dates are required")
      return
    }

    // Validate customer selection for Customer orders
    if (orderType === "Customer" && !customerId) {
      setFormError("Please select a customer")
      return
    }

    // Add additional validation for edited orders
    if (editOrder && editOrder.orderType === "Customer" && !customerId) {
      setFormError("This order needs a customer. Please select one.")
      return
    }

    // Log order creation/update
    logger.info(`${editOrder ? "Updating" : "Creating"} order`, {
      data: {
        skuCount: selectedSKUs.length,
        isDraft,
        customerId, // Log the customer ID
      },
    })

    // Create order object with customer ID
    const order = {
      ...(editOrder ? { id: editOrder.id } : {}), // Only include ID if editing
      orderType,
      customerId, // Include customer ID
      customerName,
      skus: selectedSKUs,
      productionDate: productionDueDate,
      dueDate: deliveryDate,
      status: isDraft ? ORDER_STATUS.DRAFT : ORDER_STATUS.NEW,
      action: isDraft ? "Complete order" : "Stone selection",
      remarks,
      createdAt: new Date().toISOString(),
    }

    // Call the onOrderCreated callback
    onOrderCreated(order)

    // Reset form and close sheet only if not submitting
    // The parent component will handle closing the sheet after successful submission
    if (!isSubmitting) {
      if (!isDraft) {
        setSelectedSKUs([])
        setProductionDueDate("")
        setDeliveryDate("")
        setOrderType("Stock")
        setCustomerId(DEFAULT_CUSTOMER_ID)
        setCustomerName("Exquisite Fine Jewellery")
        setRemarks("")
        setSameDatesForAll({ production: true, delivery: true })
      }

      onOpenChange(false)
    }
  }

  const handleNewSKUCreated = (newSKU) => {
    // Add the new SKU to available SKUs
    setAvailableSKUs([...availableSKUs, newSKU])

    // Optionally, add the new SKU directly to the selected SKUs
    setSelectedSKUs([
      ...selectedSKUs,
      {
        ...newSKU,
        quantity: 1,
        size: newSKU.size || "",
        remarks: "",
        individualProductionDate: productionDueDate,
        individualDeliveryDate: deliveryDate,
      },
    ])
  }

  const openImageDialog = (image) => {
    setSelectedImage(image)
    setImageDialogOpen(true)
  }

  // Extract unique categories, gold types, and stone types for filters
  const categories = ["all", ...new Set(availableSKUs.map((sku) => sku.category).filter(Boolean))]
  const goldTypes = ["all", ...new Set(availableSKUs.map((sku) => sku.goldType).filter(Boolean))]
  const stoneTypes = ["all", ...new Set(availableSKUs.map((sku) => sku.stoneType).filter(Boolean))]

  return (
    <>
      <Sheet open={open} onOpenChange={onOpenChange}>
        {/* Width of new order form */}
        <SheetContent className="w-full sm:max-w-xl md:max-w-2xl lg:max-w-4xl xl:max-w-5xl overflow-y-auto">
          <SheetHeader>
            <SheetTitle>{editOrder ? "Edit Order" : "Create New Order"}</SheetTitle>
            <SheetDescription>{editOrder ? "Update order details" : "Add a new order to the system"}</SheetDescription>
          </SheetHeader>

          {formError && (
            <Alert variant="destructive" className="mt-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{formError}</AlertDescription>
            </Alert>
          )}

          {!editOrder && (
            <Alert variant="info" className="mt-4">
              <Info className="h-4 w-4" />
              <AlertDescription>Order ID will be automatically generated by the system.</AlertDescription>
            </Alert>
          )}

          {editOrder && editOrder.orderType === "Customer" && editOrder.customerName && !customerId && (
            <Alert variant="warning" className="mt-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                No matching customer found for "{editOrder.customerName}". Please select a customer.
              </AlertDescription>
            </Alert>
          )}

          <form onSubmit={handleSubmit} className="space-y-6 py-6">
            <div className="space-y-4">
              {/* Remove Order Number field for new orders */}
              {editOrder && (
                <div className="space-y-2">
                  <Label htmlFor="orderNumber">Order Number</Label>
                  <Input id="orderNumber" value={editOrder.id} disabled />
                  <p className="text-xs text-muted-foreground">Auto-generated</p>
                </div>
              )}

              <div className="flex flex-wrap gap-4 items-start">
                <div className="space-y-2 w-[150px]">
                  <Label htmlFor="orderType">Order Type</Label>
                  <Select value={orderType} onValueChange={setOrderType} required disabled={isSubmitting}>
                    <SelectTrigger id="orderType">
                      <SelectValue placeholder="Select order type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Stock">Stock</SelectItem>
                      <SelectItem value="Customer">Customer</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2 w-[200px]">
                  <Label htmlFor="customerName">Customer Name</Label>
                  {orderType === "Stock" ? (
                    <Input id="customerName" value={customerName} disabled />
                  ) : (
                    <Select
                      value={customerId && customerName ? `${customerId}|${customerName}` : ""}
                      onValueChange={handleCustomerChange}
                      required
                      disabled={isSubmitting || isLoadingCustomers}
                    >
                      <SelectTrigger id="customerName">
                        <SelectValue placeholder={isLoadingCustomers ? "Loading customers..." : "Select customer"} />
                      </SelectTrigger>
                      <SelectContent>
                        {isLoadingCustomers ? (
                          <SelectItem value="loading|Loading" disabled>
                            Loading customers...
                          </SelectItem>
                        ) : customers.length > 0 ? (
                          customers.map((customer) => (
                            <SelectItem key={customer.id} value={`${customer.id}|${customer.name}`}>
                              {customer.name}
                            </SelectItem>
                          ))
                        ) : (
                          <SelectItem value="nodata|No Data" disabled>
                            No customers found
                          </SelectItem>
                        )}
                      </SelectContent>
                    </Select>
                  )}
                </div>

                <div className="space-y-2 w-[180px]">
                  <Label htmlFor="productionDueDate">Production Date</Label>
                  <Input
                    id="productionDueDate"
                    type="date"
                    value={productionDueDate}
                    onChange={(e) => setProductionDueDate(e.target.value)}
                    required={!isDraft}
                    disabled={isSubmitting}
                  />
                  <div className="flex items-center space-x-2 mt-1">
                    <Checkbox
                      id="sameProdDate"
                      checked={sameDatesForAll.production}
                      onCheckedChange={(checked) => setSameDatesForAll({ ...sameDatesForAll, production: checked })}
                      disabled={isSubmitting}
                    />
                    <label htmlFor="sameProdDate" className="text-xs text-muted-foreground cursor-pointer">
                      Same for all SKUs
                    </label>
                  </div>
                </div>

                <div className="space-y-2 w-[180px]">
                  <Label htmlFor="deliveryDate">Delivery Date</Label>
                  <Input
                    id="deliveryDate"
                    type="date"
                    value={deliveryDate}
                    onChange={(e) => handleDeliveryDateChange(e.target.value)}
                    required={!isDraft}
                    disabled={isSubmitting}
                  />
                  <div className="flex items-center space-x-2 mt-1">
                    <Checkbox
                      id="sameDeliveryDate"
                      checked={sameDatesForAll.delivery}
                      onCheckedChange={(checked) => setSameDatesForAll({ ...sameDatesForAll, delivery: checked })}
                      disabled={isSubmitting}
                    />
                    <label htmlFor="sameDeliveryDate" className="text-xs text-muted-foreground cursor-pointer">
                      Same for all SKUs
                    </label>
                  </div>
                </div>

                <div className="space-y-2 flex-1 min-w-[200px]">
                  <Label htmlFor="remarks">Reference Notes</Label>
                  <Input
                    id="remarks"
                    placeholder="Enter any reference notes..."
                    value={remarks}
                    onChange={(e) => setRemarks(e.target.value.slice(0, 500))}
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              {dateWarning && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>Delivery date should be at least 7 days after production due date</AlertDescription>
                </Alert>
              )}

              {/* Selected SKUs Table - Now above the SKUs Database List */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Selected SKUs</Label>
                </div>

                {selectedSKUs.length === 0 ? (
                  <div className="text-center py-4 text-muted-foreground border rounded-lg">No SKUs selected yet</div>
                ) : (
                  <div className="border rounded-lg">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Image</TableHead>
                          <TableHead>SKU ID</TableHead>
                          <TableHead>Name</TableHead>
                          <TableHead>Size</TableHead>
                          <TableHead>Quantity</TableHead>
                          <TableHead>Production Date</TableHead>
                          <TableHead>Delivery Date</TableHead>
                          <TableHead>Remarks</TableHead>
                          <TableHead className="text-right">Remove</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {selectedSKUs.map((sku) => (
                          <TableRow key={sku.id}>
                            <TableCell>
                              <div
                                className="w-10 h-10 rounded-md overflow-hidden cursor-pointer"
                                onClick={() => openImageDialog(sku.image)}
                              >
                                <img
                                  src={sku.image || "/placeholder.svg"}
                                  alt={sku.name}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                            </TableCell>
                            <TableCell className="font-medium">{sku.id}</TableCell>
                            <TableCell>{sku.name}</TableCell>
                            <TableCell>
                              <Input
                                type="text"
                                className="w-16"
                                value={sku.size || ""}
                                onChange={(e) => updateSize(sku.id, e.target.value)}
                                disabled={sku.category === "Earring" || isSubmitting}
                              />
                            </TableCell>
                            <TableCell>
                              <Input
                                type="number"
                                min="1"
                                className="w-16"
                                value={sku.quantity}
                                onChange={(e) => updateQuantity(sku.id, e.target.value)}
                                disabled={isSubmitting}
                              />
                            </TableCell>
                            <TableCell>
                              <Input
                                type="date"
                                value={sameDatesForAll.production ? productionDueDate : sku.individualProductionDate}
                                onChange={(e) =>
                                  sameDatesForAll.production
                                    ? setProductionDueDate(e.target.value)
                                    : updateIndividualDate(sku.id, "individualProductionDate", e.target.value)
                                }
                                disabled={isSubmitting || sameDatesForAll.production}
                              />
                            </TableCell>
                            <TableCell>
                              <Input
                                type="date"
                                value={sameDatesForAll.delivery ? deliveryDate : sku.individualDeliveryDate}
                                onChange={(e) =>
                                  sameDatesForAll.delivery
                                    ? handleDeliveryDateChange(e.target.value)
                                    : updateIndividualDate(sku.id, "individualDeliveryDate", e.target.value)
                                }
                                disabled={isSubmitting || sameDatesForAll.delivery}
                              />
                            </TableCell>
                            <TableCell>
                              <Input
                                type="text"
                                className="w-full"
                                value={sku.remarks || ""}
                                onChange={(e) => updateRemarks(sku.id, e.target.value)}
                                placeholder="Add remarks"
                                maxLength={100}
                                disabled={isSubmitting}
                              />
                            </TableCell>
                            <TableCell className="text-right">
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeSKU(sku.id)}
                                disabled={isSubmitting}
                              >
                                <Trash2 className="h-4 w-4" />
                                <span className="sr-only">Remove</span>
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>SKUs Database List</Label>
                </div>

                <div className="flex flex-wrap gap-2 mb-2">
                  <div className="relative flex-grow">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      type="search"
                      placeholder="Search SKUs..."
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      disabled={isSubmitting}
                    />
                  </div>

                  <Select value={categoryFilter} onValueChange={setCategoryFilter} disabled={isSubmitting}>
                    <SelectTrigger className="w-[120px]">
                      <SelectValue placeholder="Category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category} value={category}>
                          {category === "all" ? "All Categories" : category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Select value={goldTypeFilter} onValueChange={setGoldTypeFilter} disabled={isSubmitting}>
                    <SelectTrigger className="w-[120px]">
                      <SelectValue placeholder="Gold Type" />
                    </SelectTrigger>
                    <SelectContent>
                      {goldTypes.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type === "all" ? "All Gold Types" : type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Select value={stoneTypeFilter} onValueChange={setStoneTypeFilter} disabled={isSubmitting}>
                    <SelectTrigger className="w-[120px]">
                      <SelectValue placeholder="Stone Type" />
                    </SelectTrigger>
                    <SelectContent>
                      {stoneTypes.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type === "all" ? "All Stone Types" : type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="border rounded-lg max-h-[200px] overflow-y-auto">
                  {isLoadingSKUs ? (
                    <div className="flex items-center justify-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin mr-2" />
                      <span>Loading SKUs...</span>
                    </div>
                  ) : skuError ? (
                    <div className="text-center py-4 text-muted-foreground">
                      <AlertTriangle className="h-6 w-6 mx-auto mb-2" />
                      <p>{skuError}</p>
                    </div>
                  ) : (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-[60px]">Image</TableHead>
                          <TableHead>SKU ID</TableHead>
                          <TableHead>Name</TableHead>
                          <TableHead>Category</TableHead>
                          <TableHead className="text-right">Add</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredSKUs.map((sku) => (
                          <TableRow key={sku.id}>
                            <TableCell>
                              <div
                                className="w-8 h-8 rounded-md overflow-hidden cursor-pointer"
                                onClick={() => openImageDialog(sku.image)}
                              >
                                <img
                                  src={sku.image || "/placeholder.svg?height=40&width=40&text=SKU"}
                                  alt={sku.name}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                            </TableCell>
                            <TableCell className="font-medium">{sku.id}</TableCell>
                            <TableCell>{sku.name}</TableCell>
                            <TableCell>{sku.category}</TableCell>
                            <TableCell className="text-right">
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => addSKU(sku)}
                                disabled={isSubmitting}
                              >
                                <Plus className="h-4 w-4" />
                                <span className="sr-only">Add</span>
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                        {filteredSKUs.length === 0 && (
                          <TableRow>
                            <TableCell colSpan={5} className="text-center py-4 text-muted-foreground">
                              No SKUs found
                            </TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                  )}
                </div>

                <div className="flex items-center justify-center">
                  <div className="flex items-center gap-2">
                    <Separator className="w-16" />
                    <span className="text-xs text-muted-foreground">OR</span>
                    <Separator className="w-16" />
                  </div>
                </div>

                <div className="flex justify-center">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setNewSKUSheetOpen(true)}
                    disabled={isSubmitting}
                  >
                    <Plus className="mr-2 h-4 w-4" />
                    Create a new SKU
                  </Button>
                </div>
              </div>
            </div>

            <SheetFooter className="flex flex-col space-y-4 mt-6">
              <Button
                type="submit"
                disabled={
                  isSubmitting || selectedSKUs.length === 0 || (!isDraft && (!productionDueDate || !deliveryDate))
                }
                className="w-full"
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {editOrder ? "Updating..." : "Creating..."}
                  </>
                ) : (
                  <>{editOrder ? "Update Order" : "Create Order"}</>
                )}
              </Button>

              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setIsDraft(true)
                  handleSubmit({ preventDefault: () => {} })
                }}
                className="w-full"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  "Save as Draft"
                )}
              </Button>
            </SheetFooter>
          </form>
        </SheetContent>
      </Sheet>

      {/* New SKU Sheet */}
      <NewSKUSheet open={newSKUSheetOpen} onOpenChange={setNewSKUSheetOpen} onSKUCreated={handleNewSKUCreated} />

      <Dialog open={imageDialogOpen} onOpenChange={setImageDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>SKU Image</DialogTitle>
          </DialogHeader>
          <div className="flex items-center justify-center p-6">
            {selectedImage && (
              <img
                src={selectedImage || "/placeholder.svg"}
                alt="SKU"
                className="max-w-full max-h-[500px] object-contain"
              />
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}
